{
  "Import React": {
    "prefix": "imr",
    "body": [
      "import React from 'react';"
    ],
    "description": "Import React - if you must."
  },
  "Import { Component }": {
    "prefix": "imrc",
    "body": [
      "import { Component } from 'react';"
    ],
    "description": "Import { Component }"
  },
  "Import { useState }": {
    "prefix": "imst",
    "body": [
      "import { useState } from 'react';"
    ],
    "description": "React 16.8+ useState import"
  },
  "React useState": {
    "prefix": "ust",
    "body": "const [state, setState] = useState(${1:INITIAL_VALUE});",
    "description": "React 16.8+ useState"
  },
  "Import { useEffect }": {
    "prefix": "imeff",
    "body": [
      "import { useEffect } from 'react';"
    ],
    "description": "React 16.8+ useEffect import"
  },
  "Use useEffect": {
    "prefix": "uueff",
    "body": [
      "useEffect(() => {$1, [$0]);"
    ],
    "description": "useEffect snippet with empty second argument"
  },
  "Import { useContext }": {
    "prefix": "imctx",
    "body": [
      "import { useContext } from 'react';"
    ],
    "description": "React 16.8+ useContext import"
  },
  "React useContext": {
    "prefix": "uctx",
    "body": "const $0 = useContext(${1:CONTEXT_OBJECT});",
    "description": "React 16.8+ useContext"
  },
  "Import { useMemo }": {
    "prefix": "immem",
    "body": [
      "import { useMemo } from 'react';"
    ],
    "description": "React 16.8+ useMemo import"
  },
  "Import { useRef }": {
    "prefix": "imref",
    "body": [
      "import { useRef } from 'react';"
    ],
    "description": "React 16.8+ useRef import"
  },
  "Import { useImperativeHandle }": {
    "prefix": "imimphan",
    "body": [
      "import { useImperativeHandle } from 'react';"
    ],
    "description": "React 16.8+ useImperativeHandle import"
  },
  "Import { useLayoutEffect }": {
    "prefix": "imlayeff",
    "body": [
      "import { useLayoutEffect } from 'react';"
    ],
    "description": "React 16.8+ useLayoutEffect import"
  },
  "Import { useDebugValue }": {
    "prefix": "imdebval",
    "body": [
      "import { useDebugValue } from 'react';"
    ],
    "description": "React 16.8+ useDebugValue import"
  },
  "Import PropTypes": {
    "prefix": "imt",
    "body": [
      "import PropTypes from 'prop-types';"
    ],
    "description": "Import PropTypes"
  },
  "Class Component": {
    "prefix": "cc",
    "body": [
      "class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\tstate = { $2 }",
      "\trender() { ",
      "\t\treturn ( $0 );",
      "\t}",
      "}",
      " ",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "Class Component"
  },
  "Class Component With Constructor": {
    "prefix": "ccc",
    "body": [
      "class ${1:${TM_FILENAME_BASE}} extends React.Component {",
      "\tconstructor(props) {",
      "\t\tsuper(props);",
      "\t\tthis.state = { $2 }",
      "\t}",
      "\trender() { ",
      "\t\treturn ( $0 );",
      "\t}",
      "}",
      " ",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "Class Component With Constructor"
  },
  "Functional Component": {
    "prefix": "fc",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = ($2) => {",
      "\treturn ( $0 );",
      "}",
      " ",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "Functional Component"
  },
  "Functional Component with useState hook": {
    "prefix": "fcst",
    "body": [
      "import { useState } from 'react';",
      " ",
      "const ${1:${TM_FILENAME_BASE}} = ($2) => {",
      "const [value, setValue] = useState(${1:INITIAL_VALUE});",
      " ",
      "\treturn ( $0 );",
      "}",
      " ",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "Functional Component with useState hook"
  },
  "import NextJS Head": {
    "prefix": "imhd",
    "body": "import Head from 'next/head';",
    "description": "NextJS Head import"
  },
  "NextJS Get initial props outside Component": {
    "prefix": "gip",
    "body": [
      "${1:${TM_FILENAME_BASE}}.getInitialProps = ({ req }) => {",
      "\treturn $2",
      "}"
    ],
    "description": "NextJS Get initial props outside Component"
  },
  "NextJS getInitialProps() inside Class Component": {
    "prefix": "ccgip",
    "body": [
      "static async getInitialProps() {",
      "\treturn { $1 };",
      "}"
    ],
    "description": "NextJS static async getInitialProps() inside Class Component"
  },
  "NextJS getInitialProps() expose query": {
    "prefix": "ccgipaq",
    "body": [
      "static async getInitialProps({ Component, ctx }) {",
      "  let pageProps = {};",
      "  if (Component.getInitialProps) {",
      "    pageProps = await Component.getInitialProps(ctx);",
      "  }",
      "",
      "  pageProps.query = ctx.query;",
      "  pageProps.asPath = ctx.asPath;",
      "",
      "  return { pageProps };",
      "}"
    ],
    "description": "NextJS static async getInitialProps() withApollo() expose query and pageProps"
  },
  "Use NextJS Head": {
    "prefix": "nhd",
    "body": [
      "<Head>",
      "\t$1",
      "</Head>"
    ],
    "description": "NextJS Head Tag"
  },
  "import NextJS Link": {
    "prefix": "imlnk",
    "body": "import Link from 'next/link';",
    "description": "NextJS Link import"
  },
  "Use NextJS Link": {
    "prefix": "nlnk",
    "body": [
      "<Link href=\"$1\">",
      "\t<a>",
      "\t\t$0",
      "\t</a>",
      "</Link>"
    ],
    "description": "NextJS Link Tag with <a>"
  },
  "Use NextJS Link With Pathname": {
    "prefix": "nlnkpath",
    "body": [
      "<Link href={{ pathname: \"$1\", query: { queryName: queryValue } }}>",
      "\t<a>",
      "\t\t$0",
      "\t</a>",
      "</Link>"
    ],
    "description": "NextJS Link with Pathname"
  },
  "Use NextJS LinkTagWithDynmicRoute": {
    "prefix": "nlnkdyn",
    "body": [
      "<Link href=\"/[$1]\" as={`/${2:SLUG_NAME}`}>",
      "\t<a>",
      "\t\t$0",
      "\t</a>",
      "</Link>"
    ],
    "description": "NextJS Link Tag with Dynamic Route"
  },
  "importNextRouter": {
    "prefix": "imrtr",
    "body": "import Router from 'next/router';",
    "description": "NextJS Router import"
  },
  "NextJS Router from useRouter": {
    "prefix": "nrtr",
    "body": "const router = useRouter();",
    "description": "Declare NextJS Router from useRouter"
  },
  "NextJS query param from useRouter": {
    "prefix": "nqprtr",
    "body": "const { $1 } = router.query;",
    "description": "Destructure NextJS query param from Router from useRouter"
  },
  "importNextRouterWithRouter": {
    "prefix": "imrtrwr",
    "body": "import Router, { withRouter } from 'next/router';",
    "description": "NextJS Router and { withRouter } import"
  },
  "importNextUseRouter": {
    "prefix": "imusrtr",
    "body": "import { useRouter } from 'next/router';",
    "description": "NextJS { useRouter } import"
  }
}